name: Build and Test
on:
  push:
    branches:
      - main
      - development

env:
  FUNCTION_NAME: bookings-service
  APP_NAME: parlorbox
jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v2

      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install Poetry
        run: |
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | POETRY_HOME=/opt/poetry python && \
          cd /usr/local/bin && \
          ln -sf /opt/poetry/bin/poetry && \
          poetry config virtualenvs.create false

      - name: Install dependencies
        run: poetry install

      - name: Load Environment Variables
        run: cp .env.example .env

      - name: Lint with flake8
        run: poetry run flake8 .

      - name: Formatting with black
        run: poetry run black .

      - name: Sort imports with isort
        run: poetry run isort .

      - name: Run mypy
        run: poetry run mypy .

      - name: Test with pytest
        run: poetry run pytest

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v2

      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Set Steps Vars
        id: vars
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com

      - name: Build Lambda Docker
        run:
          docker build -t ${{ env.APP_NAME }}-${{env.FUNCTION_NAME }}-${{ steps.vars.outputs.branch }} -f ./Dockerfile .

      - name: Tag Docker Image
        run: |
          docker tag ${{ env.APP_NAME }}-${{ env.FUNCTION_NAME }}-${{ steps.vars.outputs.branch }}:latest \
          ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ env.APP_NAME }}-${{ env.FUNCTION_NAME }}-${{ steps.vars.outputs.branch }}:latest

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ env.APP_NAME }}-${{ env.FUNCTION_NAME }}-${{ steps.vars.outputs.branch }}:latest

      - name: Deploy new Lambda
        run: |
          aws lambda update-function-code \
          --function-name ${{ env.FUNCTION_NAME }}-${{ steps.vars.outputs.branch }} \
          --image-uri ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ env.APP_NAME }}-${{ env.FUNCTION_NAME }}-${{ steps.vars.outputs.branch }}:latest
